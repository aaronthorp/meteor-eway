{"version":3,"file":"/packages/eway.js","sources":["eway/lib/functions.js","eway/lib/direct/direct.js","eway/lib/preauth/preauth_auth.js","eway/lib/preauth/preauth_complete.js","eway/lib/preauth/preauth_cancel.js","eway/lib/token/create_customer.js","eway/lib/token/create_payment.js","eway/lib/eway.js"],"names":[],"mappings":";;;;;;;;AAAA,mC;AACA,E;AACA,gB;;AAEA,oD;AACA,iC;AACA,+B;AACA,+B;AACA,Y;AACA,4B;AACA,U;AACA,4B;AACA,K;AACA,E;AACA,c;AACA,E;AACA,E;;;;;;;;;;;;;;;;;;AChBA,yB;;AAEA,0C;AACA,uC;AACA,mC;;AAEA,qC;;AAEA,+D;AACA,I;AACA,yB;AACA,E;AACA,2B;AACA,6E;AACA,I;AACA,mB;AACA,sF;;AAEA,0B;AACA,E;AACA,c;AACA,wC;AACA,E;AACA,mB;AACA,+D;AACA,uE;AACA,I;;AAEA,8B;AACA,8F;AACA,4G;AACA,6F;AACA,M;AACA,E;AACA,8B;AACA,iG;AACA,E;AACA,sB;AACA,kB;AACA,yC;AACA,K;AACA,I;AACA,E;AACA,2B;AACA,wB;AACA,E;AACA,+C;AACA,6B;AACA,4B;AACA,uB;AACA,8G;AACA,+B;AACA,O;AACA,K;AACA,K;AACA,E;AACA,sB;AACA,I;AACA,iD;AACA,4B;AACA,kE;AACA,U;AACA,mD;AACA,O;AACA,I;AACA,oC;AACA,E;AACA,wC;AACA,I;AACA,gB;AACA,iC;AACA,qC;AACA,qB;AACA,e;AACA,M;AACA,E;AACA,6C;AACA,gB;AACA,yB;AACA,0B;AACA,O;AACA,E;AACA,sC;AACA,M;AACA,uD;AACA,Q;AACA,sC;AACA,sD;;AAEA,yC;AACA,uC;AACA,Q;AACA,mE;AACA,Q;AACA,2B;AACA,S;AACA,M;AACA,O;AACA,I;AACA,G;;AAEA,oB;AACA,E;;;;;;;;;;;;;;;;;;;;ACtGA,8C;;AAEA,gE;AACA,I;AACA,yB;AACA,E;AACA,2B;AACA,6E;AACA,I;AACA,mB;AACA,sF;;AAEA,2B;AACA,E;AACA,c;AACA,yC;AACA,E;AACA,oB;AACA,4D;AACA,2E;AACA,I;;AAEA,+B;AACA,8F;AACA,4G;AACA,6F;AACA,M;AACA,E;AACA,+B;AACA,iG;AACA,E;AACA,uB;AACA,kB;AACA,yC;AACA,K;AACA,I;AACA,E;AACA,4B;AACA,wB;AACA,E;AACA,gD;AACA,6B;AACA,6B;AACA,uB;AACA,8G;AACA,+B;AACA,O;AACA,K;AACA,K;AACA,E;AACA,uB;AACA,I;AACA,kD;AACA,4B;AACA,mE;AACA,U;AACA,oD;AACA,O;AACA,I;AACA,qC;AACA,E;AACA,wC;AACA,I;AACA,gB;AACA,mC;AACA,qC;AACA,qB;AACA,e;AACA,M;AACA,E;AACA,6C;AACA,gB;AACA,qF;AACA,O;AACA,E;AACA,sC;AACA,M;AACA,uD;;AAEA,sB;AACA,yD;AACA,yD;AACA,+D;AACA,2D;AACA,2D;AACA,2D;AACA,qD;AACA,6D;AACA,uD;AACA,gC;AACA,kC;AACA,U;AACA,Q;AACA,2D;AACA,Q;AACA,2B;AACA,S;AACA,M;AACA,O;AACA,I;AACA,G;;AAEA,oB;AACA,E;;;;;;;;;;;;;;;;;;;;ACvGA,qC;;AAEA,0C;AACA,uC;AACA,mC;;AAEA,qC;;AAEA,gE;AACA,I;AACA,yB;AACA,E;AACA,2B;AACA,6E;AACA,I;AACA,mB;AACA,sF;;AAEA,2B;AACA,E;AACA,c;AACA,yC;AACA,E;AACA,oB;AACA,gE;AACA,+E;AACA,I;;AAEA,+B;AACA,yG;AACA,M;AACA,E;AACA,+B;AACA,qC;AACA,E;AACA,uB;AACA,kB;AACA,yC;AACA,K;AACA,I;AACA,E;AACA,4B;AACA,wB;AACA,E;AACA,gD;AACA,6B;AACA,6B;AACA,uB;AACA,8G;AACA,4B;AACA,O;AACA,K;AACA,K;AACA,E;AACA,E;AACA,uB;AACA,I;AACA,kD;AACA,4B;AACA,mE;AACA,U;AACA,oD;AACA,O;AACA,I;AACA,qC;AACA,E;AACA,wC;AACA,I;AACA,gB;AACA,mC;AACA,qC;AACA,qB;AACA,e;AACA,M;AACA,E;AACA,6C;AACA,gB;AACA,qF;AACA,O;AACA,E;AACA,sC;AACA,M;AACA,uD;;AAEA,sB;AACA,yD;AACA,yD;AACA,2D;AACA,2D;AACA,2D;AACA,qD;AACA,6D;AACA,uD;AACA,gC;AACA,sC;AACA,U;AACA,Q;AACA,2D;AACA,Q;AACA,2B;AACA,S;AACA,M;AACA,O;AACA,I;AACA,G;;AAEA,oB;AACA,E;;;;;;;;;;;;;;;;;;;;AC3GA,mC;;AAEA,0C;AACA,uC;AACA,mC;;AAEA,qC;;AAEA,kE;AACA,I;AACA,yB;AACA,E;AACA,2B;AACA,6E;AACA,I;AACA,mB;AACA,sF;;AAEA,6B;AACA,E;AACA,c;AACA,2C;AACA,E;AACA,sB;AACA,4D;AACA,2E;AACA,I;;AAEA,iC;AACA,oE;AACA,M;AACA,E;AACA,iC;AACA,mC;AACA,I;AACA,E;AACA,yB;AACA,kB;AACA,yC;AACA,K;AACA,I;AACA,E;AACA,8B;AACA,wB;AACA,E;AACA,kD;AACA,6B;AACA,+B;AACA,uB;AACA,8G;AACA,+B;AACA,O;AACA,K;AACA,K;AACA,E;AACA,yB;AACA,I;AACA,oD;AACA,4B;AACA,qE;AACA,U;AACA,sD;AACA,O;AACA,I;AACA,uC;AACA,E;AACA,wC;AACA,I;AACA,gB;AACA,uC;AACA,qC;AACA,qB;AACA,e;AACA,M;AACA,E;AACA,6C;AACA,gB;AACA,qF;AACA,O;AACA,E;AACA,sC;AACA,M;AACA,uD;AACA,c;AACA,sB;AACA,yD;AACA,yD;AACA,2D;AACA,2D;AACA,2D;AACA,qD;AACA,6D;AACA,uD;AACA,kC;AACA,oC;AACA,U;AACA,Q;AACA,2D;AACA,Q;AACA,2B;AACA,S;AACA,M;AACA,O;AACA,I;AACA,G;;AAEA,oB;AACA,E;AACA,E;;;;;;;;;;;;;;;;;;;;AC5GA,gF;AACA,I;AACA,qB;AACA,E;AACA,oB;AACA,wB;;AAEA,6B;AACA,wB;;AAEA,kB;AACA,kG;AACA,yG;AACA,I;;AAEA,uC;;AAEA,iB;AACA,kB;AACA,sC;AACA,Y;AACA,kB;AACA,2C;AACA,yB;AACA,yH;AACA,c;AACA,mE;AACA,wC;AACA,O;AACA,Y;AACA,iB;AACA,4C;AACA,yB;AACA,wH;AACA,c;AACA,uC;AACA,O;AACA,Y;AACA,oB;AACA,qC;AACA,4C;AACA,yB;AACA,iI;AACA,c;AACA,sC;AACA,O;AACA,Y;AACA,Y;AACA,+F;AACA,G;AACA,E;AACA,gC;AACA,uG;AACA,oG;AACA,0C;AACA,M;AACA,E;AACA,gC;AACA,oH;AACA,I;;AAEA,4E;AACA,8E;AACA,mD;AACA,mD;AACA,G;AACA,E;AACA,iD;AACA,6B;AACA,8B;AACA,uB;AACA,8G;AACA,+B;AACA,O;AACA,K;AACA,K;AACA,E;AACA,mB;AACA,E;AACA,iD;AACA,U;AACA,qD;AACA,8B;AACA,6C;AACA,Y;AACA,8B;AACA,S;AACA,M;AACA,8B;AACA,S;AACA,8B;AACA,kB;AACA,mE;AACA,a;AACA,4B;AACA,S;AACA,Q;AACA,E;AACA,sB;AACA,S;AACA,iC;AACA,kB;AACA,sE;AACA,qE;AACA,2D;AACA,a;AACA,2B;AACA,S;AACA,Q;AACA,E;AACA,2E;AACA,I;AACA,0C;AACA,M;AACA,kB;AACA,oC;AACA,uC;AACA,uB;AACA,kB;AACA,kB;AACA,+B;AACA,oD;AACA,uC;AACA,sF;AACA,S;AACA,Q;AACA,M;AACA,+C;AACA,Q;AACA,kB;AACA,uF;AACA,S;AACA,G;AACA,yD;AACA,U;AACA,uD;AACA,E;AACA,4C;AACA,U;AACA,oB;AACA,gH;AACA,mB;AACA,U;AACA,qB;AACA,8D;AACA,I;AACA,yB;AACA,iE;AACA,Y;AACA,kD;AACA,iD;AACA,a;AACA,Y;AACA,yB;AACA,0D;AACA,8C;AACA,kB;AACA,6C;AACA,gD;AACA,oB;AACA,qC;AACA,a;AACA,Y;AACA,U;AACA,W;AACA,Q;AACA,S;AACA,K;AACA,G;AACA,E;AACA,oB;AACA,E;AACA,E;;;;;;;;;;;;;;;;;;AC5KA,0E;AACA,I;AACA,qB;AACA,E;AACA,mB;AACA,qC;;AAEA,kB;AACA,kG;AACA,yG;AACA,I;;AAEA,sC;;AAEA,E;AACA,+B;AACA,2E;AACA,M;AACA,E;AACA,+B;AACA,iC;AACA,I;;AAEA,4B;AACA,wB;AACA,E;AACA,gD;AACA,6B;AACA,6B;AACA,uB;AACA,8G;AACA,+B;AACA,O;AACA,K;AACA,K;AACA,E;AACA,uB;AACA,Q;AACA,kD;AACA,4B;AACA,0C;AACA,U;AACA,2B;AACA,O;AACA,I;AACA,4B;AACA,O;AACA,2B;AACA,gB;AACA,iE;AACA,W;AACA,yB;AACA,O;AACA,M;;AAEA,oB;AACA,O;AACA,+B;AACA,gB;AACA,oE;AACA,mE;AACA,yD;AACA,W;AACA,yB;AACA,O;AACA,M;;AAEA,yE;AACA,E;AACA,wC;AACA,I;AACA,gB;AACA,kC;AACA,qC;AACA,qB;AACA,gB;AACA,gB;AACA,6B;AACA,kD;AACA,qC;AACA,mF;AACA,O;AACA,M;AACA,I;AACA,qB;AACA,I;AACA,6C;AACA,M;AACA,gB;AACA,qF;AACA,O;AACA,C;AACA,uD;AACA,Q;AACA,qD;;AAEA,0C;AACA,Q;AACA,kB;AACA,8G;AACA,iB;AACA,Q;AACA,mB;AACA,2D;;AAEA,uB;AACA,uD;AACA,U;AACA,uB;AACA,wD;AACA,4C;AACA,gB;AACA,4C;AACA,W;AACA,U;AACA,Q;AACA,S;AACA,M;AACA,O;AACA,G;AACA,E;AACA,oB;AACA,E;AACA,E;;;;;;;;;;;;;;;;;;AC3HA,W;AACA,mB;AACA,yB;AACA,iB;AACA,kB;;AAEA,sC;;AAEA,mC;AACA,+B;;AAEA,iC;;AAEA,sB;AACA,Q;AACA,sB;AACA,mB;AACA,0B;AACA,wC;AACA,E;AACA,4B;AACA,E;AACA,iC;AACA,wG;AACA,yE;;AAEA,gC;AACA,6D;AACA,G;;AAEA,6B;AACA,iE;AACA,G;AACA,E;AACA,6B;AACA,mB;AACA,I;AACA,E;AACA,uC;AACA,I;AACA,+B;AACA,uF;AACA,K;;AAEA,2D;AACA,I;AACA,E;AACA,8C;AACA,I;AACA,+B;AACA,wF;AACA,K;;AAEA,mB;AACA,qB;AACA,+D;AACA,sB;AACA,+D;AACA,oB;AACA,iE;AACA,c;AACA,uF;AACA,K;AACA,I;AACA,I;AACA,I;AACA,4C;AACA,I;AACA,+B;AACA,sF;AACA,K;;AAEA,iD;AACA,qG;AACA,K;;AAEA,oB;AACA,sB;AACA,S;AACA,8B;AACA,4E;AACA,qB;AACA,kD;AACA,yC;AACA,wC;AACA,W;AACA,S;AACA,Q;AACA,qB;AACA,M;AACA,I;AACA,qC;AACA,I;AACA,mB;AACA,4B;AACA,oF;AACA,4B;AACA,oF;AACA,2B;AACA,mF;AACA,4B;AACA,0E;AACA,0B;AACA,sF;AACA,c;AACA,qI;AACA,M;AACA,I;AACA,I;AACA,E;AACA,E","sourcesContent":["FixArrays = function(arrayObject) {\n  \n  var temp = {};\n\n   _.each(arrayObject , function(value, key, list) {\n      if (value instanceof Array)\n        if (value.length === 1)\n          temp[key] = value[0];\n        else\n          temp[key] = value;\n      else\n          temp[key] = value;\n  });\n  \n  return temp;\n  \n};","// Direct Payment to eWay\n\nvar Future = Npm.require('fibers/future');\nvar jsonxml = Npm.require('jsontoxml');\nvar xml2js = Npm.require('xml2js');\n\nvar request = Npm.require('request');\n\nprocessDirectTransaction = function(transaction, options) {    \n    \n  var fut = new Future();\n  \n  if (!options.customer_id)\n    fut.return({TrxnStatus: false, TrxnError: '99,No customer Id provided'});\n    \n  if (!transaction)\n    fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway'});\n\n  var directMode = 'live';\n  \n  if (options)\n    directMode = options.mode || \"live\";\n  \n  var directURL = {\n    live: 'https://www.eway.com.au/gateway_cvn/xmlpayment.asp',\n    sandbox: 'https://www.eway.com.au/gateway_cvn/xmltest/testpage.asp'\n  };\n\n  var directPossibleFields = [\n    'TotalAmount', 'CustomerFirstName', 'CustomerLastName', 'CustomerEmail','CustomerAddress',\n    'CustomerPostcode', 'CustomerInvoiceDescription', 'CustomerInvoiceRef', 'CardHoldersName', 'CardNumber',\n    'CardExpiryMonth', 'CardExpiryYear', 'TrxnNumber', 'Option1', 'Option2', 'Option3', 'CVN'\n  ];  \n  \n  var directRequiredFields = [\n    'TotalAmount', 'CardHoldersName', 'CardNumber', 'CardExpiryMonth',  'CardExpiryYear', 'CVN'];\n  \n  var directPacket = {\n    ewaygateway: {\n      ewayCustomerID: options.customer_id\n    }\n  };\n  \n  var directIsValid = true;\n  var errorSent = false;\n  \n  directRequiredFields.forEach(function(item) {\n    if (!transaction[item]) {\n      directIsValid = false;\n      if (!errorSent) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway. \"'+item+'\" missing'});\n        errorSent = true;      \n      }\n    }\n  });\n  \n  if (directIsValid) {\n    \n    directPossibleFields.forEach(function(item) {\n      if (transaction[item])\n        directPacket.ewaygateway[\"eway\"+item] = transaction[item];\n      else\n        directPacket.ewaygateway[\"eway\"+item] = '';\n    });\n    \n    var xml = jsonxml(directPacket);\n  \n    var timeoutInMilliseconds = 10*1000;\n    \n    var opts = {\n      url: directURL[directMode],\n      timeout: timeoutInMilliseconds,\n      method: \"POST\",\n      body: xml\n    };\n  \n    request(opts, function (err, res, body) {\n      if (err) {\n        console.dir(err);\n        fut.return(false);\n      }\n  \n      var statusCode = res.statusCode;\n      \n      xml2js.parseString(res.body, function(err, res) {\n        \n        var response = FixArrays(res);\n        var result = FixArrays(response.ewayResponse);\n\n        result.ewayTrxnMode = directMode;\n        result.ewayTrxnType = 'direct';\n        \n        result.ewayTrxnStatus = (result.ewayTrxnStatus === 'True');\n        \n        fut.return(result);\n      });\n      \n    });\n    \n  }\n\n  return fut.wait();\n};\n\n","// PreAuth - Pre Authorisation Payment to eWay\n\nprocessPreAuthTransaction = function(transaction, options) {    \n    \n  var fut = new Future();\n  \n  if (!options.customer_id)\n    fut.return({TrxnStatus: false, TrxnError: '99,No customer Id provided'});\n    \n  if (!transaction)\n    fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway'});\n\n  var preauthMode = 'live';\n  \n  if (options)\n    preauthMode = options.mode || \"live\";\n  \n  var preauthURL = {\n    live: 'https://www.eway.com.au/gateway_cvn/xmlauth.asp',\n    sandbox: 'https://www.eway.com.au/gateway_cvn/xmltest/authtestpage.asp'\n  };\n\n  var preauthPossibleFields = [\n    'TotalAmount', 'CustomerFirstName', 'CustomerLastName', 'CustomerEmail','CustomerAddress',\n    'CustomerPostcode', 'CustomerInvoiceDescription', 'CustomerInvoiceRef', 'CardHoldersName', 'CardNumber',\n    'CardExpiryMonth', 'CardExpiryYear', 'TrxnNumber', 'Option1', 'Option2', 'Option3', 'CVN'\n  ];  \n  \n  var preauthRequiredFields = [\n    'TotalAmount', 'CardHoldersName', 'CardNumber', 'CardExpiryMonth',  'CardExpiryYear', 'CVN'];\n  \n  var preauthPacket = {\n    ewaygateway: {\n      ewayCustomerID: options.customer_id\n    }\n  };\n  \n  var preauthIsValid = true;\n  var errorSent = false;\n  \n  preauthRequiredFields.forEach(function(item) {\n    if (!transaction[item]) {\n      preauthIsValid = false;\n      if (!errorSent) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway. \"'+item+'\" missing'});\n        errorSent = true;      \n      }\n    }\n  });\n  \n  if (preauthIsValid) {\n    \n    preauthPossibleFields.forEach(function(item) {\n      if (transaction[item])\n        preauthPacket.ewaygateway[\"eway\"+item] = transaction[item];\n      else\n        preauthPacket.ewaygateway[\"eway\"+item] = '';\n    });\n    \n    var xml = jsonxml(preauthPacket);\n  \n    var timeoutInMilliseconds = 10*1000;\n    \n    var opts = {\n      url: preauthURL[preauthMode],\n      timeout: timeoutInMilliseconds,\n      method: \"POST\",\n      body: xml\n    };\n  \n    request(opts, function (err, res, body) {\n      if (err) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Transaction Error \"'+err+'\"'});\n      }\n  \n      var statusCode = res.statusCode;\n      \n      xml2js.parseString(res.body, function(err, res) {\n\n        var result = {\n          TrxnStatus: res.ewayResponse.ewayTrxnStatus[0],\n          TrxnNumber: res.ewayResponse.ewayTrxnNumber[0],\n          TrxnReference: res.ewayResponse.ewayTrxnReference[0],\n          TrxnOption1: res.ewayResponse.ewayTrxnOption1[0],\n          TrxnOption2: res.ewayResponse.ewayTrxnOption2[0],\n          TrxnOption3: res.ewayResponse.ewayTrxnOption3[0],\n          AuthCode: res.ewayResponse.ewayAuthCode[0],\n          ReturnAmount: res.ewayResponse.ewayReturnAmount[0],\n          TrxnError: res.ewayResponse.ewayTrxnError[0],\n          TrxnMode: preauthMode,\n          TrxnType: 'preauth_auth'\n        };\n        \n        result.TrxnStatus = (result.TrxnStatus === 'True');\n        \n        fut.return(result);\n      });\n      \n    });\n    \n  }\n\n  return fut.wait();\n};\n\n","// PreAuth - Complete Payment to eWay\n\nvar Future = Npm.require('fibers/future');\nvar jsonxml = Npm.require('jsontoxml');\nvar xml2js = Npm.require('xml2js');\n\nvar request = Npm.require('request');\n\nprocessPreCompTransaction = function(transaction, options) {    \n    \n  var fut = new Future();\n  \n  if (!options.customer_id)\n    fut.return({TrxnStatus: false, TrxnError: '99,No customer Id provided'});\n    \n  if (!transaction)\n    fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway'});\n\n  var precompMode = 'live';\n  \n  if (options)\n    precompMode = options.mode || \"live\";\n  \n  var precompURL = {\n    live: 'https://www.eway.com.au/gateway/xmlauthcomplete.asp',\n    sandbox: 'https://www.eway.com.au/gateway/xmltest/authcompletetestpage.asp'\n  };\n\n  var precompPossibleFields = [\n    'TotalAmount', 'AuthTrxnNumber', 'CardExpiryMonth', 'CardExpiryYear', 'Option1', 'Option2', 'Option3'\n  ];  \n  \n  var precompRequiredFields = [\n    'TotalAmount', 'AuthTrxnNumber'];\n  \n  var precompPacket = {\n    ewaygateway: {\n      ewayCustomerID: options.customer_id\n    }\n  };\n  \n  var precompIsValid = true;\n  var errorSent = false;\n  \n  precompRequiredFields.forEach(function(item) {\n    if (!transaction[item]) {\n      precompIsValid = false;\n      if (!errorSent) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway. \"'+item+'\" missing'});\n        errorSent = true;   \n      }\n    }\n  });\n  \n  \n  if (precompIsValid) {\n    \n    precompPossibleFields.forEach(function(item) {\n      if (transaction[item])\n        precompPacket.ewaygateway[\"eway\"+item] = transaction[item];\n      else\n        precompPacket.ewaygateway[\"eway\"+item] = '';\n    });\n    \n    var xml = jsonxml(precompPacket);\n  \n    var timeoutInMilliseconds = 10*1000;\n    \n    var opts = {\n      url: precompURL[precompMode],\n      timeout: timeoutInMilliseconds,\n      method: \"POST\",\n      body: xml\n    };\n  \n    request(opts, function (err, res, body) {\n      if (err) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Transaction Error \"'+err+'\"'});\n      }\n  \n      var statusCode = res.statusCode;\n      \n      xml2js.parseString(res.body, function(err, res) {\n\n        var result = {\n          TrxnStatus: res.ewayResponse.ewayTrxnStatus[0],\n          TrxnNumber: res.ewayResponse.ewayTrxnNumber[0],\n          TrxnOption1: res.ewayResponse.ewayTrxnOption1[0],\n          TrxnOption2: res.ewayResponse.ewayTrxnOption2[0],\n          TrxnOption3: res.ewayResponse.ewayTrxnOption3[0],\n          AuthCode: res.ewayResponse.ewayAuthCode[0],\n          ReturnAmount: res.ewayResponse.ewayReturnAmount[0],\n          TrxnError: res.ewayResponse.ewayTrxnError[0],\n          TrxnMode: precompMode,\n          TrxnType: 'preauth_complete'\n        };\n        \n        result.TrxnStatus = (result.TrxnStatus === 'True');\n        \n        fut.return(result);\n      });\n      \n    });\n    \n  }\n\n  return fut.wait();\n};\n\n","// PreAuth - Cancel Payment to eWay\n\nvar Future = Npm.require('fibers/future');\nvar jsonxml = Npm.require('jsontoxml');\nvar xml2js = Npm.require('xml2js');\n\nvar request = Npm.require('request');\n\nprocessPreCancelTransaction = function(transaction, options) {    \n    \n  var fut = new Future();\n  \n  if (!options.customer_id)\n    fut.return({TrxnStatus: false, TrxnError: '99,No customer Id provided'});\n    \n  if (!transaction)\n    fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway'});\n\n  var precancelMode = 'live';\n  \n  if (options)\n    precancelMode = options.mode || \"live\";\n  \n  var precancelURL = {\n    live: 'https://www.eway.com.au/gateway/xmlauthvoid.asp',\n    sandbox: 'https://www.eway.com.au/gateway/xmltest/authvoidtestpage.asp'\n  };\n\n  var precancelPossibleFields = [\n    'TotalAmount', 'AuthTrxnNumber', 'Option1', 'Option2', 'Option3'\n  ];  \n  \n  var precancelRequiredFields = [\n    'TotalAmount', 'AuthTrxnNumber'\n  ];\n  \n  var precancelPacket = {\n    ewaygateway: {\n      ewayCustomerID: options.customer_id\n    }\n  };\n  \n  var precancelIsValid = true;\n  var errorSent = false;\n  \n  precancelRequiredFields.forEach(function(item) {\n    if (!transaction[item]) {\n      precancelIsValid = false;\n      if (!errorSent) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway. \"'+item+'\" missing'});\n        errorSent = true;      \n      }\n    }\n  });\n  \n  if (precancelIsValid) {\n    \n    precancelPossibleFields.forEach(function(item) {\n      if (transaction[item])\n        precancelPacket.ewaygateway[\"eway\"+item] = transaction[item];\n      else\n        precancelPacket.ewaygateway[\"eway\"+item] = '';\n    });\n    \n    var xml = jsonxml(precancelPacket);\n  \n    var timeoutInMilliseconds = 10*1000;\n    \n    var opts = {\n      url: precancelURL[precancelMode],\n      timeout: timeoutInMilliseconds,\n      method: \"POST\",\n      body: xml\n    };\n  \n    request(opts, function (err, res, body) {\n      if (err) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Transaction Error \"'+err+'\"'});\n      }\n  \n      var statusCode = res.statusCode;\n      \n      xml2js.parseString(res.body, function(err, res) {\n              \n        var result = {\n          TrxnStatus: res.ewayResponse.ewayTrxnStatus[0],\n          TrxnNumber: res.ewayResponse.ewayTrxnNumber[0],\n          TrxnOption1: res.ewayResponse.ewayTrxnOption1[0],\n          TrxnOption2: res.ewayResponse.ewayTrxnOption2[0],\n          TrxnOption3: res.ewayResponse.ewayTrxnOption3[0],\n          AuthCode: res.ewayResponse.ewayAuthCode[0],\n          ReturnAmount: res.ewayResponse.ewayReturnAmount[0],\n          TrxnError: res.ewayResponse.ewayTrxnError[0],\n          TrxnMode: precancelMode,\n          TrxnType: 'preauth_cancel'\n        };\n        \n        result.TrxnStatus = (result.TrxnStatus === 'True');\n        \n        fut.return(result);\n      });\n      \n    });\n    \n  }\n\n  return fut.wait();\n  \n};\n\n","processTokenCreateCustomer = function(mode, payload, transaction, options) {    \n    \n  fut = new Future();\n  \n  var customer = {};\n  var customerMode = '';\n\n  var customerIsValid = true;\n  var errorSent = false;\n\n  var tokenURL = {\n    \"live\": \"https://www.eway.com.au/gateway/ManagedPaymentService/managedCreditCardPayment.asmx\",\n    \"sandbox\": \"https://www.eway.com.au/gateway/ManagedPaymentService/test/managedCreditCardPayment.asmx\"\n  };\n\n  customerURL = tokenURL[options.mode];\n\n  switch (mode) {\n    case 'create':\n      customerMode = 'CreateCustomer';\n      break;\n    case 'update':\n      if (!transaction.managedCustomerID) {\n        errorSent = true;\n        fut.return({TrxnStatus: false, TrxnError: 'Token Transaction: Managed Customer ID Required to update customer'});\n      } else {\n        customer.managedCustomerID = transaction.managedCustomerID;\n        customerMode = 'UpdateCustomer';\n      }\n      break;\n    case \"query\":\n       if (!transaction.managedCustomerID) {\n        errorSent = true;\n        fut.return({TrxnStatus: false, TrxnError: 'Token Transaction: Managed Customer ID Required to query customer'});\n      } else {\n        customerMode = 'QueryCustomer';\n      }\n      break;\n    case \"payments\":\n      //query payments for a customer\n       if (!transaction.managedCustomerID) {\n        errorSent = true;\n        fut.return({TrxnStatus: false, TrxnError: 'Token Transaction: Managed Customer ID Required to query customer payments'});\n      } else {\n        customerMode = 'QueryPayment';\n      }\n      break;\n    default:\n      fut.return({TrxnStatus: false, TrxnError: 'Token Transaction: Invalid customer action'});\n  }\n  \n  var customerPossibleFields = [\n    'CustomeRef', 'Title', 'FirstName', 'LastName', 'Company', 'JobDesc', 'Email', 'Address', 'Suburb',\n    'Postcode', 'Country', 'Phone', 'Mobile', 'Fax', 'URL', 'Comments', 'CCNumber', 'CCNameOnCard', \n    'CCExpiryMonth', 'CCExpiryYear', 'CVN'\n  ];  \n  \n  var customerRequiredFields = [\n    'Title', 'FirstName', 'LastName', 'Country' , 'CCNumber', 'CCNameOnCard', 'CCExpiryMonth', 'CCExpiryYear', 'CVN'\n  ];\n\n  if (customerMode === 'QueryCustomer' || customerMode === 'QueryPayment') {\n    // if it is a query then the only field reqired is the managed Customer ID\n    customerPossibleFields = ['managedCustomerID'];\n    customerRequiredFields = ['managedCustomerID'];\n  }\n  \n  customerRequiredFields.forEach(function(item) {\n    if (!transaction[item]) {\n      customerIsValid = false;\n      if (!errorSent) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway. \"'+item+'\" missing'});\n        errorSent = true;      \n      }\n    }\n  });\n  \n  if (!errorSent) {\n  \n    if (customerIsValid && customerMode !== '') {\n          \n      customerPossibleFields.forEach(function(item) {\n        if (transaction[item])\n          customer[item] = transaction[item];\n        else\n          customer[item] = '';\n      });\n      \n      payload['soap:Body'] = [\n        {\n          name: customerMode, \n          attrs: {\n            xmlns: 'https://www.eway.com.au/gateway/managedpayment'\n          }, \n          children: customer\n        }\n      ];\n  \n      var envelope = [\n        {\n          name: 'soap:Envelope', \n          attrs: {\n            'xmlns:soap': 'http://schemas.xmlsoap.org/soap/envelope/',\n            'xmlns:xsi': \"http://www.w3.org/2001/XMLSchema-instance\",\n            'xmlns:xsd': \"http://www.w3.org/2001/XMLSchema\"\n          }, \n          children: payload\n        }\n      ];\n  \n      var xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?>'+jsonxml(envelope);\n    \n      var timeoutInMilliseconds = 10*1000;\n      \n      var opts = {\n        url: tokenURL[options.mode],\n        timeout: timeoutInMilliseconds,\n        method: \"POST\",\n        body: xml,\n        headers: {\n          \"Accept\": \"text/xml\",\n          \"Content-type\": \"text/xml; charset=utf-8\",\n          \"Content-length\": xml.length,\n          \"SOAPAction\": \"https://www.eway.com.au/gateway/managedpayment/\"+customerMode\n        }\n      };\n      \n      request(opts, function (err, res, body) {\n        \n        if (err) {\n          fut.return({TrxnStatus: false, TrxnError: '99,Transaction Error \"'+err+'\"'});\n        }\n   \n        xml2js.parseString(res.body, function(err, res) {\n          \n          var body = res[\"soap:Envelope\"][\"soap:Body\"];\n  \n          var fault = body[0]['soap:Fault'];\n          \n          if (fault)\n            fut.return({TrxnStatus: false, TrxnError: '99,Transaction Error \"'+fault[0]['faultstring'][0]+'\"'});\n          else {   \n          \n            if (body)\n              var response = body[0][customerMode+\"Response\"];\n    \n            if (response)\n              var result = response[0][customerMode+\"Result\"][0];\n            \n            if (customerMode === 'QueryPayment') {\n              result = result.ManagedTransaction;\n            }\n            \n            if (result) {\n              if (result === 'true' || result === 'false')\n                fut.return(result === 'true');\n              else\n                if (result instanceof Object)\n                  fut.return(FixArrays(result));\n                else\n                  fut.return(result);\n            }\n          } \n          \n        });\n        \n      });\n    }\n  }\n  \n  return fut.wait();\n  \n};","processTokenProcessPayment = function(payload, transaction, options) {    \n    \n  fut = new Future();\n  \n  var payment = {};\n  var paymentMode = 'ProcessPayment';\n\n  var tokenURL = {\n    \"live\": \"https://www.eway.com.au/gateway/ManagedPaymentService/managedCreditCardPayment.asmx\",\n    \"sandbox\": \"https://www.eway.com.au/gateway/ManagedPaymentService/test/managedCreditCardPayment.asmx\"\n  };\n\n  paymentURL = tokenURL[options.mode];\n\n  \n  var paymentPossibleFields = [\n    'managedCustomerID', 'amount', 'invoiceReference', 'invoiceDescription'\n  ];  \n  \n  var paymentRequiredFields = [\n    'managedCustomerID', 'amount'\n  ];\n\n  var paymentIsValid = true;\n  var errorSent = false;\n  \n  paymentRequiredFields.forEach(function(item) {\n    if (!transaction[item]) {\n      paymentIsValid = false;\n      if (!errorSent) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Invalid data provided to gateway. \"'+item+'\" missing'});\n        errorSent = true;      \n      }\n    }\n  });\n  \n  if (paymentIsValid) {\n        \n    paymentPossibleFields.forEach(function(item) {\n      if (transaction[item])\n        payment[item] = transaction[item];\n      else\n        payment[item] = '';\n    });\n    \n    payload['soap:Body'] = [\n      {\n        name: paymentMode, \n        attrs: {\n          xmlns: 'https://www.eway.com.au/gateway/managedpayment'\n        }, \n        children: payment\n      }\n    ];\n\n    var envelope = [\n      {\n        name: 'soap:Envelope', \n        attrs: {\n          'xmlns:soap': 'http://schemas.xmlsoap.org/soap/envelope/',\n          'xmlns:xsi': \"http://www.w3.org/2001/XMLSchema-instance\",\n          'xmlns:xsd': \"http://www.w3.org/2001/XMLSchema\"\n        }, \n        children: payload\n      }\n    ];\n\n    var xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?>'+jsonxml(envelope);\n  \n    var timeoutInMilliseconds = 10*1000;\n    \n    var opts = {\n      url: tokenURL[options.mode],\n      timeout: timeoutInMilliseconds,\n      method: \"POST\",\n      body: xml,\n      headers: {\n        \"Accept\": \"text/xml\",\n        \"Content-type\": \"text/xml; charset=utf-8\",\n        \"Content-length\": xml.length,\n        \"SOAPAction\": \"https://www.eway.com.au/gateway/managedpayment/\"+paymentMode\n      }\n    };\n    \n    console.log(xml);\n    \n    request(opts, function (err, res, body) {\n      \n      if (err) {\n        fut.return({TrxnStatus: false, TrxnError: '99,Transaction Error \"'+err+'\"'});\n      }\n \n      xml2js.parseString(res.body, function(err, res) {\n        \n        var body = res[\"soap:Envelope\"][\"soap:Body\"];\n\n        var fault = body[0]['soap:Fault'];\n        \n        if (fault)\n          fut.return({TrxnStatus: false, TrxnError: '99,Transaction Error \"'+fault[0]['faultstring'][0]+'\"'});\n        else {   \n        \n          if (body)\n            var response = body[0][paymentMode+\"Response\"];\n\n          if (response)\n            var result = response[0][\"ewayResponse\"][0]\n          \n          if (result) {\n            if (result === 'true' || result === 'false')\n              fut.return(result === 'true');\n            else\n              fut.return(FixArrays(result));\n          }\n        } \n        \n      });\n      \n    });\n  }\n  \n  return fut.wait();\n  \n};","//! eway.js\n//! version : 0.0.8\n//! authors : Aaron Thorp\n//! license : MIT\n//! aaronthorp.com\n\nFuture = Npm.require('fibers/future');\n\njsonxml = Npm.require('jsontoxml');\nxml2js = Npm.require('xml2js');\n\nrequest = Npm.require('request');\n\nvar VERSION = \"0.0.8\";\n        \neWay = function(opt) {\n  var self = this; \n  var options = opt || {};\n  options.mode = options.mode || 'live';\n  \n  this.version = VERSION;   \n  \n  // public variable declerations\n  Object.defineProperty(this,\"options\",{get:function(){return options},set:function(val){options=val}});\n  Object.defineProperty(this,\"version\",{get:function(){return VERSION}});\n\n  if (!(self instanceof eWay)) {\n    throw new Error('use \"new\" to construct a eWay object.');\n  }\n\n  if (!options.customer_id) {\n    throw new Error('\"customer_id\" was not defined in options.');\n  }\n  \n  this.version = function() {\n    return VERSION;\n  };\n  \n  this.direct = function(transaction) {\n    \n    if (!options.customer_id) {\n      throw new Error('Direct Transaction: \"customer_id\" was not defined in options.');\n    }\n\n    return processDirectTransaction(transaction, options); \n  };\n  \n  this.preauth = function(mode, transaction) {\n    \n    if (!options.customer_id) {\n      throw new Error('PreAuth Transaction: \"customer_id\" was not defined in options.');\n    }\n\n    switch (mode) {\n      case 'preauth':\n        return processPreAuthTransaction(transaction, options);\n      case 'complete':\n        return processPreCompTransaction(transaction, options);\n      case 'cancel':\n        return processPreCancelTransaction(transaction, options);\n      default:\n        throw new Error('PreAuth Transaction: Invalid Mode [preauth|complete|cancel]');\n    }\n    \n  };\n    \n  this.token = function(mode, transaction) {\n    \n    if (!options.customer_id) {\n      throw new Error('Token Transaction: \"customer_id\" was not defined in options.');\n    }\n\n    if (!options.username || !options.password) {\n      throw new Error('Token Transaction: \"username\" and/or \"password\" was not defined in options.');\n    }\n\n    var envelope = {\n      \"soap:Header\": [\n        {\n          name: 'eWAYHeader', \n          attrs: {xmlns: 'https://www.eway.com.au/gateway/managedpayment'}, \n          children: [\n            {eWAYCustomerID: options.customer_id},\n            {Username: options.username},\n            {Password: options.password}\n          ]\n        }\n      ],\n      \"soap:Body\": {}\n    };\n    \n    //console.log(jsonxml(envelope));\n    \n    switch (mode) {\n      case 'createCustomer':\n        return processTokenCreateCustomer('create', envelope, transaction, options);\n      case 'updateCustomer':\n        return processTokenCreateCustomer('update', envelope, transaction, options);\n      case 'queryCustomer':\n        return processTokenCreateCustomer('query', envelope, transaction, options);\n      case 'processPayment':\n        return processTokenProcessPayment(envelope, transaction, options);\n      case 'queryPayment':\n        return processTokenCreateCustomer('payments', envelope, transaction, options);\n      default:\n        throw new Error('Token Transaction: Invalid Mode [createCustomer|updateCustomer|queryCustomer|processPayment|queryPayment]');\n    } \n    \n  };\n  \n};"]}